{"version":3,"sources":["lib/firebase.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","firestore","collection","storage","ref","UpdatedStory","props","words","useState","setWords","useEffect","unsubscribe","orderBy","onSnapshot","snapshot","newWords","docs","map","doc","id","data","UpdateWords","word","key","onClick","disabled","text","Master","state","value","submitEnabled","recording","handleChange","bind","handleSubmit","this","setState","setTimeout","event","target","replace","add","timestamp","Date","getTime","preventDefault","disableSubmit","delete","handleDelete","onSubmit","type","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAgBAA,IAASC,cAXM,CAEbC,OAAQC,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKMT,QAAf,ECXIU,EAAQV,EAASW,YAAYC,WAAW,SAC3BZ,EAASa,UAAUC,MAqBpC,SAASC,EAAaC,GACpB,IAAMC,EAnBR,WAAuB,MACKC,mBAAS,IADd,mBACdD,EADc,KACPE,EADO,KAerB,OAZAC,qBAAU,WACR,IAAMC,EAAcX,EAAMY,QAAQ,YAAa,OAAOC,YAAW,SAACC,GAChE,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBACjCC,GAAID,EAAIC,IAELD,EAAIE,WAETX,EAASM,MAEX,OAAO,kBAAMJ,OACZ,IAEIJ,EAIOc,GAEd,OACE,4BACGd,EAAMU,KAAI,SAACK,GAAD,OACT,wBAAIC,IAAKD,EAAKH,IACZ,4BAAQK,QAAS,kBAAMlB,EAAMkB,QAAQF,EAAKH,KAAKM,SAAUnB,EAAMmB,UAC5DH,EAAKI,W,IASZC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXC,MAAO,GACPC,eAAe,EACfL,UAAU,EACVM,UAAW,SAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,E,4DAaH,IAAD,OACbE,KAAKC,SAAS,CAACN,eAAe,EAAOL,UAAU,IAE/CY,YAAW,kBAAM,EAAKD,SAAS,CAACN,eAAe,EAAML,UAAU,MAAS,O,mCAG7Da,GAEXH,KAAKC,SAAS,CAACP,MAAOS,EAAMC,OAAOV,MAAMW,QAAQ,IAAK,Q,mCAG3CF,GACX,IAAM3B,EAAcX,EAAMyC,IAAI,CAC5Bf,KAAMS,KAAKP,MAAMC,MACjBa,WAAW,IAAIC,MAAOC,YAKxB,OAHAN,EAAMO,iBACNV,KAAKC,SAAS,CAACP,MAAO,KACtBM,KAAKW,gBACE,kBAAMnC,O,mCAGFQ,GACX,IAAMR,EAAcX,EAAMkB,IAAIC,GAAI4B,SAElC,OADAZ,KAAKW,gBACE,kBAAMnC,O,+BAGL,IAAD,OAsBP,OACE,6BACE,6BACE,sHAA2F,6BAAK,6BAAhG,sDAGF,6BACE,kBAACN,EAAD,CAAcmB,QAAS,SAAAL,GAAE,OAAI,EAAK6B,aAAa7B,IAAKM,SAAUU,KAAKP,MAAMH,YAE3E,8BACgC,IAA7BU,KAAKP,MAAME,eACV,0BAAMmB,SAAUd,KAAKD,cACnB,+BACE,2BAAOgB,KAAK,OAAOrB,MAAOM,KAAKP,MAAMC,MAAOsB,SAAUhB,KAAKH,gBAE7D,2BAAOkB,KAAK,SAASrB,MAAM,SAASJ,UAAWU,KAAKP,MAAMC,e,GA/EnDuB,IAAMC,WAwF3BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.d4c3ea58.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport 'firebase/database';\n\nconst config = {\n  //.env is hidden in storycollab\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: \"storycollab-def01.firebaseapp.com\",\n  databaseURL: \"https://storycollab-def01.firebaseio.com\",\n  projectId: \"storycollab-def01\",\n  storageBucket: \"storycollab-def01.appspot.com\",\n  messagingSenderId: \"246768205772\",\n  appId: \"1:246768205772:web:aa742d8c191d5f9ba96769\"\n}\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport firebase from './lib/firebase.js';\n\n//note: can't use fs (file system) bc react stubs out node core modules\n\nlet dbRef = firebase.firestore().collection('words');\nlet storageRef = firebase.storage().ref();\n\n\nfunction UpdateWords() { //API call to firebase\n  const [words, setWords] = useState([]);\n  //creating a subscription to firestore\n  useEffect(() => {\n    const unsubscribe = dbRef.orderBy('timestamp', 'asc').onSnapshot((snapshot) => {\n      const newWords = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        //spread operator (...) to merge doc.id w data\n        ...doc.data()\n      }))\n      setWords(newWords)\n    })\n    return () => unsubscribe()\n  }, []); //2nd parameter must be empty array, otherwise will rerun ad infinitum\n\n  return words;\n}\n\nfunction UpdatedStory(props) {\n  const words = UpdateWords();\n\n  return(\n    <ul>\n      {words.map((word) =>\n        <li key={word.id}>\n          <button onClick={() => props.onClick(word.id)} disabled={props.disabled}>\n            {word.text}\n          </button>\n        </li>\n      )}\n    </ul>\n  );\n}\n\n// React Component\nclass Master extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      submitEnabled: true,\n      disabled: false,\n      recording: 'ready'\n    };\n\n    this.handleChange = this.handleChange.bind(this); //other way of writing is onSubmit={(event) => {this.handleChange(event)}}\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  disableSubmit(){\n    this.setState({submitEnabled: false, disabled: true});\n    //after 15 min, re-enable submit\n    setTimeout(() => this.setState({submitEnabled: true, disabled: false}), 900000);\n  }\n\n  handleChange(event) { //react re-renders after every change\n    //prevents typing space\n    this.setState({value: event.target.value.replace(' ', '')});\n  }\n\n  handleSubmit(event) {\n    const unsubscribe = dbRef.add({\n      text: this.state.value,\n      timestamp: new Date().getTime() //Unix timestamp\n    });\n    event.preventDefault(); //prevents submit from navigating to a different page\n    this.setState({value: ''}); //clears value\n    this.disableSubmit();\n    return () => unsubscribe();\n  }\n\n  handleDelete(id){\n    const unsubscribe = dbRef.doc(id).delete();\n    this.disableSubmit();\n    return () => unsubscribe();\n  }\n\n  render() {\n\n    // start recording\n    const startCallback = () => {\n      this.setState({recording: 'started'})\n    };\n\n    // end recording\n    const endCallback = () => {\n      this.setState({recording: 'finished'})\n    };\n\n    // uploading\n    const uploadingCallback = () => {\n      this.setState({recording: 'uploading'})\n    };\n\n    // saved\n    const savedCallback = () => {\n      this.setState({recording: 'saved'})\n    };\n\n    return (\n      <div>\n        <div>\n          <p>Enter a single word to add to the story OR click on a word to remove it from the story. <br/><br/>\n          You can only perform one action every 15 minutes.</p>\n        </div>\n        <div>\n          <UpdatedStory onClick={id => this.handleDelete(id)} disabled={this.state.disabled}/>\n        </div>\n        <div>\n          {this.state.submitEnabled === true &&(\n            <form onSubmit={this.handleSubmit}>\n              <label>\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n              </label>\n              <input type=\"submit\" value=\"SUBMIT\" disabled={!this.state.value}/>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Master />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}