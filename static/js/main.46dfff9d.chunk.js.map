{"version":3,"sources":["lib/firebase.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","firestore","collection","UpdatedStory","props","words","useState","setWords","useEffect","unsubscribe","orderBy","onSnapshot","snapshot","newWords","docs","map","doc","id","data","UpdateWords","word","key","onClick","disabled","text","Master","state","value","recording","startTime","waitLeft","handleChange","bind","handleSubmit","localStorage","getItem","timeLeft","Date","getTime","this","setState","setTimeout","removeItem","setItem","event","target","replace","add","timestamp","preventDefault","disableSubmit","window","confirm","delete","handleDelete","onSubmit","type","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAgBAA,IAASC,cAXM,CAEbC,OAAQC,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAKMT,ICLXU,EDKWV,EAAf,ECLqBW,YAAYC,WAAW,SAoB5C,SAASC,EAAaC,GACpB,IAAMC,EAnBR,WAAuB,MACKC,mBAAS,IADd,mBACdD,EADc,KACPE,EADO,KAerB,OAZAC,qBAAU,WACR,IAAMC,EAAcT,EAAMU,QAAQ,YAAa,OAAOC,YAAW,SAACC,GAChE,IAAMC,EAAWD,EAASE,KAAKC,KAAI,SAACC,GAAD,oBACjCC,GAAID,EAAIC,IAELD,EAAIE,WAETX,EAASM,MAEX,OAAO,kBAAMJ,OACZ,IAEIJ,EAIOc,GAEd,OACE,4BACGd,EAAMU,KAAI,SAACK,GAAD,OACT,wBAAIC,IAAKD,EAAKH,IACZ,4BAAQK,QAAS,kBAAMlB,EAAMkB,QAAQF,EAAKH,KAAKM,SAAUnB,EAAMmB,UAC5DH,EAAKI,W,IAUZC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXC,MAAO,GACPJ,UAAU,EACVK,UAAW,QACXC,UAAW,EACXC,SAAU,GAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXH,E,gEAcC,IAAD,OAEjB,GAAIE,aAAaC,QAAQ,aAAc,CAErC,IAAMC,EAAW,MAAU,IAAIC,MAAOC,UAAYJ,aAAaC,QAAQ,cACnEC,EAAW,IACbG,KAAKC,SAAS,CAACjB,UAAU,IACzBkB,YAAW,WACT,EAAKD,SAAS,CAACjB,UAAU,IACzBW,aAAaQ,WAAW,eACvBN,O,sCAKO,IAAD,OAEbG,KAAKC,SAAS,CAACjB,UAAU,IAEzBW,aAAaS,QAAQ,aAAa,IAAIN,MAAOC,WAE7CG,YAAW,WACT,EAAKD,SAAS,CAACjB,UAAU,IACzBW,aAAaQ,WAAW,eACvB,O,mCAGQE,GAEXL,KAAKC,SAAS,CAACb,MAAOiB,EAAMC,OAAOlB,MAAMmB,QAAQ,IAAK,Q,mCAG3CF,GACX5C,EAAM+C,IAAI,CACRvB,KAAMe,KAAKb,MAAMC,MACjBqB,WAAW,IAAIX,MAAOC,YAExBM,EAAMK,iBACNV,KAAKC,SAAS,CAACb,MAAO,KACtBY,KAAKW,kB,mCAGMjC,GAEPkC,OAAOC,QAAQ,gDACjBpD,EAAMgB,IAAIC,GAAIoC,SACdd,KAAKW,mB,+BAIC,IAAD,OACP,OACE,6BACE,6BACE,uGAA4E,6BAAK,6BAAjF,kFAGF,6BACE,kBAAC/C,EAAD,CAAcmB,QAAS,SAAAL,GAAE,OAAI,EAAKqC,aAAarC,IAAKM,SAAUgB,KAAKb,MAAMH,YAE3E,8BAC2B,IAAxBgB,KAAKb,MAAMH,UACV,0BAAMgC,SAAUhB,KAAKN,cACnB,+BACE,2BAAOuB,KAAK,OAAO7B,MAAOY,KAAKb,MAAMC,MAAO8B,SAAUlB,KAAKR,gBAE7D,2BAAOyB,KAAK,SAAS7B,MAAM,SAASJ,UAAWgB,KAAKb,MAAMC,e,GAjFnD+B,IAAMC,WA0F3BC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.46dfff9d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport 'firebase/database';\n\nconst config = {\n  //.env is hidden in storycollab\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: \"storycollab-def01.firebaseapp.com\",\n  databaseURL: \"https://storycollab-def01.firebaseio.com\",\n  projectId: \"storycollab-def01\",\n  storageBucket: \"storycollab-def01.appspot.com\",\n  messagingSenderId: \"246768205772\",\n  appId: \"1:246768205772:web:aa742d8c191d5f9ba96769\"\n}\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport firebase from './lib/firebase.js';\n\n//note: can't use fs (file system) bc react stubs out node core modules\n\n//think about the relationship between people interacting. ppl care more when\n//their actions have consequences on other ppl (or outcomes)\n//anonymity -> lowered stakes -> disengagement\n//look at post-structuralism (like flux, john cage, generated poetry, etc).\n\n\nlet dbRef = firebase.firestore().collection('words');\n\nfunction UpdateWords() { //API call to firebase\n  const [words, setWords] = useState([]);\n  //creating a subscription to firestore\n  useEffect(() => {\n    const unsubscribe = dbRef.orderBy('timestamp', 'asc').onSnapshot((snapshot) => {\n      const newWords = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        //spread operator (...) to merge doc.id w data\n        ...doc.data()\n      }))\n      setWords(newWords)\n    })\n    return () => unsubscribe()\n  }, []); //2nd parameter must be empty array, otherwise will rerun ad infinitum\n\n  return words;\n}\n\nfunction UpdatedStory(props) {\n  const words = UpdateWords();\n\n  return(\n    <ul>\n      {words.map((word) =>\n        <li key={word.id}>\n          <button onClick={() => props.onClick(word.id)} disabled={props.disabled}>\n            {word.text}\n          </button>\n        </li>\n      )}\n    </ul>\n  );\n}\n\n\n// React Component\nclass Master extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      disabled: false,\n      recording: 'ready',\n      startTime: 0,\n      waitLeft: 0\n    };\n    //other way of writing is onSubmit={(event) => {this.handleChange(event)}}\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(){\n    //check if startTime exists from prev session\n    if (localStorage.getItem('startTime')) {\n      //check if 15 min has passed\n      const timeLeft = 300000 - (new Date().getTime() - localStorage.getItem('startTime'))\n      if (timeLeft > 0) { //if so, disable buttons and start time out w remaining time\n        this.setState({disabled: true});\n        setTimeout(() => {\n          this.setState({disabled: false})\n          localStorage.removeItem('startTime')\n        }, timeLeft);\n      }\n    }\n  }\n\n  disableSubmit(){\n    //disable buttons\n    this.setState({disabled: true});\n    //create startTime by getting current time and add to localStorage\n    localStorage.setItem('startTime', new Date().getTime());\n    //At the end of time out, remove startTime\n    setTimeout(() => {\n      this.setState({disabled: false})\n      localStorage.removeItem('startTime')\n    }, 300000);\n  }\n\n  handleChange(event) { //react re-renders after every change\n    //prevents typing space\n    this.setState({value: event.target.value.replace(' ', '')});\n  }\n\n  handleSubmit(event) {\n    dbRef.add({\n      text: this.state.value,\n      timestamp: new Date().getTime() //Unix timestamp\n    });\n    event.preventDefault(); //prevents submit from navigating to a different page\n    this.setState({value: ''}); //clears value\n    this.disableSubmit();\n  }\n\n  handleDelete(id){\n    //confirm alert\n    if (window.confirm('Are you sure you want to delete this word?')){\n      dbRef.doc(id).delete();\n      this.disableSubmit();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <p>Enter a single word to add to the story or click on a word to remove it. <br/><br/>\n          Choose carefully––only one action can be performed every 5 minutes.</p>\n        </div>\n        <div>\n          <UpdatedStory onClick={id => this.handleDelete(id)} disabled={this.state.disabled}/>\n        </div>\n        <div>\n          {this.state.disabled !== true &&(\n            <form onSubmit={this.handleSubmit}>\n              <label>\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n              </label>\n              <input type=\"submit\" value=\"SUBMIT\" disabled={!this.state.value}/>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Master />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}